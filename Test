from Webscraping import Scraper
import unittest
import json
import pathlib as pl

class ScraperTestCase(unittest.TestCase): 

    def setUp(self, URL = "https://uk.finance.yahoo.com/currencies/"):
        scrape = Scraper()     
        self.link_list = scrape.__create_list_of_currency_links()
        currency_dict = self.create_currency_dictionary(self, link)
        currency_id = currency_dict["UUID"]
    
    def test_accept_cookie(self):
        actual_value = self.scrape.open_and_accept_cookie(headless = True)
        expected_value = "Cookie Accepted"
        self.assertEqual(expected_value,actual_value)
        
    def test_link_list(self):
        non_website_list = list(filter(lambda x: x[:40] != 'https://uk.finance.yahoo.com/currencies/', self.link_list))
        self.assertEqual(len(non_website_list), 0)

    def test_extract_info(self):
        
        
    def test_currency_dictionary(self):
        currency_dict = self.scrape.create_currency_dictionary("https://www.box.co.uk/Acer-Aspire-1-Microsoft-365-Intel-Cele_3213588.html")
        self.values = currency_dict.values()
        expected_length = 5
        actual_length = len(self.values)
        self.assertEqual(expected_length, actual_length)
        self.assertNotIn("Unknown", self.values)
        
    def assertIsFile(self, path):
        if not pl.Path(path).resolve().is_file():
            raise AssertionError(f"File does not exist: {path}")

    def assertIsFolder(self, path):
        if not pl.Path(path).resolve().is_dir():
            raise AssertionError(f"Folder does not exist: {path}")

    def test_download_all_data(self):
        path = self.product_path
        path_1 = path
        path_2 = path + "data.json"
        path_3 = path + "images/"
        path_4 = path + f"images/{self.product_id}.jpg"
        self.assertIsFolder(pl.Path(path_1))
        self.assertIsFile(pl.Path(path_2))
        self.assertIsFolder(pl.Path(path_3))
        self.assertIsFile(pl.Path(path_4))
        
if __name__ == '__main__':   
    unittest.main()